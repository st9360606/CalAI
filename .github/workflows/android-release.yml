name: Android Release

on:
  push:
    tags:
      - "v*"           # 例：v1.0.0
  workflow_dispatch:

jobs:
  build-release:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 21 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      # 還原簽章檔
      - name: Restore keystore & props
        shell: bash
        run: |
          mkdir -p android/keystore
          printf "%s" "${{ secrets.KEYSTORE_PROPERTIES }}" > android/keystore/keystore.properties
          printf "%s" "${{ secrets.KEYSTORE_JKS_BASE64 }}" | base64 -d > android/keystore/calai-release.jks

      # 出 APK + AAB（prodRelease）
      - name: Build prodRelease (APK & AAB)
        run: |
          ./gradlew :app:clean :app:assembleProdRelease :app:bundleProdRelease --stacktrace

      # 驗簽（更穩定地尋找 apksigner；找不到就警告但不失敗）
      - name: Verify signatures & print certs
        shell: bash
        run: |
          set -euo pipefail

          APK=$(ls app/build/outputs/apk/prod/release/*.apk | head -n 1)
          AAB=$(ls app/build/outputs/bundle/prodRelease/*.aab | head -n 1)

          find_apksigner() {
            # 1) PATH 直接有
            if command -v apksigner >/dev/null 2>&1; then
              command -v apksigner; return
            fi
            # 2) 常見的 SDK 目錄
            CANDIDATES=()
            [ -n "${ANDROID_SDK_ROOT:-}" ] && CANDIDATES+=("$ANDROID_SDK_ROOT")
            [ -n "${ANDROID_HOME:-}" ] && CANDIDATES+=("$ANDROID_HOME")
            [ -d "$HOME/Android/Sdk" ] && CANDIDATES+=("$HOME/Android/Sdk")
            [ -d "/usr/local/lib/android/sdk" ] && CANDIDATES+=("/usr/local/lib/android/sdk")
            [ -d "/opt/android-sdk" ] && CANDIDATES+=("/opt/android-sdk")

            for SDK in "${CANDIDATES[@]}"; do
              C=$(find "$SDK/build-tools" -type f -name apksigner 2>/dev/null | sort | tail -n 1 || true)
              if [ -n "$C" ]; then
                echo "$C"; return
              fi
            done
          }

          APKSIGNER="$(find_apksigner || true)"
          if [ -z "$APKSIGNER" ]; then
            echo "::warning::apksigner not found. Skipping APK cert print. (Build outputs will still be uploaded.)"
          else
            echo "== APK sign info =="
            "$APKSIGNER" verify --print-certs "$APK"
          fi

          echo "== AAB sign info =="
          # keytool 來自 JDK；若失敗也不要讓整個 job fail
          keytool -printcert -jarfile "$AAB" || echo "::warning::keytool printcert failed for AAB."

      # 上傳產物（APK/AAB/mapping）
      - name: Upload prodRelease artifacts
        uses: actions/upload-artifact@v4
        with:
          name: prodRelease
          path: |
            app/build/outputs/apk/prod/release/*.apk
            app/build/outputs/bundle/prodRelease/*.aab
            app/build/outputs/mapping/**/mapping.txt
          if-no-files-found: error
          retention-days: 14
